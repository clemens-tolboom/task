<?php
// $Id$

/**
 * @file
 * A task module for managing tasks.
 *
 * This module allows users and groups to manage tasks.
 * TODO: add more!
 */

/**
 * Implementation of hook_help().
 */
function task_help($section) {
  switch ($section) {
// TODO: Fix these descriptions!
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('Task manager for users and groups.');
    case 'node/add#task':
      // This description shows up when users click "create content."
      return t('Creates a task.');
  }
}

/**
 * Implementation of hook_node_name().
 */
function task_node_name($node) {
  return t('task');
}

/**
 * Implementation of hook_perm().
 */
function task_perm() {
  return array('create task',
               'access task',
               //'access private task',
               'edit own task');
}

/**
 * Implementation of hook_access().
 */
function task_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create task') && $user->uid;
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own task') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
/*
  switch ($op) {
    case 'view':
      return user_access('access task') ||
            (user_access('access own task') && $node->uid == $user->uid);
    case 'create':
      return user_access('create task') && $user->uid;
    case 'update':
    case 'delete':
      return $user->uid &&
            ($user->uid == $node->uid || user_access('edit own task'));
  }
*/
}

/**
 * Implementation of hook_nodeapi().
 *
*/
/*function og_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  global $user;

  switch ($op) {
    case 'view':
      if ($node->type != 'task') {
        $result = db_query(db_rewrite_sql("SELECT n.uid FROM {node} n INNER JOIN {task} t ON n.nid = t.nid WHERE n.status = 1"));
        $node   = db_fetch_object($result);

        if (!(user_access('access task') && ($user->uid == $node->uid))) {

        }
      }
      break;
  }
}
*/

/**
 * Implementation of hook_menu().
 */
function task_menu($may_cache) {
  global $user;
  $items = array();

  if ($may_cache) {
  	$items[] = array('path' => 'tasks', 'title' => t('tasks'),
                     'callback' => 'task_page_overview',
                     'access' => user_access('access task'));

    $items[] = array('path' => 'tasks/user', 'title' => t('my tasks'),
                     'callback' => 'task_page_user',
                     'access' => $user->uid && user_access('access task'));

    $items[] = array('path' => 'node/add/task', 'title' => t('task'),
      'access' => user_access('create task'));
  }

  return $items;
}

/**
 * Implementation of hook_form().
 */
function task_form(&$node) {
  $output = '';

  // In order to be able to attach taxonomy terms to this node, we need
  // to display the appropriate form elements.
  if (function_exists('taxonomy_node_form')) {
    $output .= implode('', taxonomy_node_form('task', $node));
  }

  // Now we define the form elements specific to our node type.
  $output .= form_textarea(t('Body'), 'body', $node->body, 60, 20, '', NULL, TRUE);
  $output .= filter_form('format', $node->format);

  return $output;
}

/**
 * Implementation of hook_validate().
 */
function task_validate(&$node) {

// TODO: Is there a better way to do this? (require preview)
  // Bail if user hasn't done a preview yet.
  if (!isset($node->title)) {
    return $node;
  }

  // We need a description.
  if (empty($node->body)) {
    form_set_error('body', t('You must add a task description.'));
  }

  return $node;
}

/**
 * Implementation of hook_insert().
 */
function task_insert($node) {
  $taskid = db_next_id('task_id');
  db_query("INSERT INTO {task} (id, nid) VALUES (%d, %d)", $taskid, $node->nid);
}

/**
 * Implementation of hook_update().
 */
function task_update($node) {
  $taskid = db_result(db_query("SELECT id FROM {sequences} WHERE name = '%s'", 'task_id'));
  db_query("UPDATE {task} SET id = %d WHERE nid = %d", $taskid,  $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function task_delete($node) {
  db_query('DELETE FROM {task} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
/*function task_load($node) {
  $additions = db_fetch_object(db_query('SELECT color, quantity FROM {tasks} WHERE nid = %d', $node->nid));
  return $additions;
}
*/

/**
 * Implementation of hook_view().
 */
/*function task_view(&$node, $teaser = FALSE, $page = FALSE) {
  $order_info = theme('task_order_info', $node);
  $node->body .= $order_info;
  $node->teaser .= $order_info;
  $node = node_prepare($node, $teaser);
}
*/

/**
 * Menu callback; display a list of tasks.
 */
// TODO: _task_page_overview?
function task_page_overview() {
  $header = array(
    array('data' => t('#')),
    array('data' => t('Summary')),
    array('data' => t('Priority')),
    array('data' => t('Status')),
    array('data' => t('Due Date')),
    array('data' => t('Category'))
  );

  // Fetch all tasks.
  $result = db_query("SELECT n.nid, n.title, n.body, n.format, t.id FROM {node} n INNER JOIN {task} t ON n.nid = t.nid WHERE n.status = 1 ORDER BY t.id ASC");

  $rows = array();
  while ($node = db_fetch_object($result)) {
    $rows[] = array($node->id, theme('task_summary', $node), '', '', '', '');
  }

  $tasks = theme('table', $header, $rows, array('id' => 'tasks_overview'));

  $output .= '<br /> <div class="tasks">' .
             form_group(t('All tasks', array('%user' => $user->name)), $tasks) .
             '</div>';

  return $output;
}

/**
 * Menu callback; display a list of tasks.
 */
// TODO: _task_page_user?
function task_page_user() {
  global $user;
  if (!$user->uid) {
    return t('You need to log in to see your tasks.');
  }

  $header = array(
    array('data' => t('#')),
    array('data' => t('Summary')),
    array('data' => t('Priority')),
    array('data' => t('Status')),
    array('data' => t('Due Date')),
    array('data' => t('Category'))
  );

  // Fetch user's tasks.
  $result = db_query("SELECT n.nid, n.title, n.body, n.format, t.id FROM {node} n INNER JOIN {task} t ON n.nid = t.nid WHERE n.status = 1 AND n.uid='%d' ORDER BY t.id ASC", $user->uid);

  if (!db_num_rows($result)) {
    // TODO: See project.module's project_page_user. Should I do the CURRENT_USER thing?
    return t('You have no projects.');
  }

  // Show the current user's tasks only
  $rows = array();
  while ($node = db_fetch_object($result)) {
    $rows[] = array($node->id, theme('task_summary', $node), '', '', '', '');
  }

  $tasks = theme('table', $header, $rows, array('id' => 'tasks_overview'));

  $output .= '<br /> <div class="tasks">' .
             form_group(t('%user\'s tasks', array('%user' => $user->name)), $tasks) .
             '</div>';

  return $output;
}

/**
 * Theme the task summary page.
 */
function theme_task_summary($node) {
  return l($node->title, "node/$node->nid");
}

/**
 * Returns the vocabulary for the specified task attribute (status, priority,
 * category) if it exists, otherwise it is created.
 */
function _task_get_vid($attr) {
  $vid = variable_get('task_'.$attr.'_vocabulary', '');
  if (empty($vid)) {
    // Check to see if the task vocabulary exists
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module='%s' AND name='%s'", 'task', $attr));
    if (!$vid) {
      $vocabulary = taxonomy_save_vocabulary(array('name' => ucfirst($attr), 'multiple' => '0', 'required' => '1', 'hierarchy' => '1', 'relations' => '0', 'module' => 'task', 'nodes' => array('task')));
      $vid = $vocabulary['vid'];
    }
    variable_set('task_'.$attr.'_vocabulary', $vid);
  }

  return $vid;
}

?>
